#valtyr

Notes:
    Named after the legendary Roman generals: Publius Cornelius Scipio and his son, Publius Cornelius Scipio Africanus, 
    whom also had a son named Publius Cornelius Scipio just to be perfectly confusing.

    Scipio requires a 'user' file generated by the aeneas script.

    The Scipio python script is a single layer perceptron neural net build to classify random binary slices from 
    12 different architectures as part of Praetorian's 'Machine Learning' challenge. 

    This script is designed to be a 'fire-and-forget' solution taking command line arguments and running automatically
    with very little human intervention.

    Scipio impliments 21 parallel perceptron groups totalling 252 individual nodes. This is used to create a confidence-based
    output system. The -conf flag is used to specify how many of the 21 perceptron groups have to fire
    in order to submit an answer. ie if -conf 20 then Scipio won't submit an answer if the total number of firing perceptrons is 
    under 20. It will instead request a new challenge since it wasn't confident in its answer.

    Scipio uses a normal linear weight adjustment algorithm augmented with small random mutation. 

    To build a training set for the AI, Scipio automatically saves the challenge blob and the server's answer into an output file called 
    scipio_training_data which can be used to train Scipio using different algorithm values to achive the best accuracy. Fortunatly I already
    trained it, and the best weights are located in the weights.txt and best_weights.txt file which can be loaded into the program with the -load flag. 

    The random blob input is chunked into different sections depending on the perceptron group. The 21 groups chunk the input into 8char, 16char, and 32char sections.
    The individual chunks then get a frequency analysis on tokens a-f and 0-9. Those frequencies are then fed back into the perceptron's weight and the 
    threshold is calculated. After Scipio submits an answer and the server returns the answer, the weights of all perceptrons are adjusted.

    Training Scipio takes a decent amount of computation power and time due to the large amount of training data and 252 individual perceptrons calculations.
    You won't need to do this but if you want to, the -epoch flag is used to specify how many times Scipio will iterate over the training data. 
    The weights are saved in weights.txt after each epoch, so you can keyboard interrupt after an epoch and still have the weights. best_weights.txt 
    has the weights used to solve this challenge. If you train Scipio it'll overwrite the weights.txt file, so you can load (-load best_weights) 
    if you train but want to use the pre-trained weights instead. 

Command Line:
    python3 scipio.py -h
    python3 scipio.py -alpha 0.00001 -load weights.txt -conf 20
    python3 scipio.py -epoch 3 -alpha 0.000001 

Help:
    usage: scipio.py [-h] [-a ALPHA] [-thresh THRESHOLD] [-e EPOCHS]
                    [-l LOAD] [-t SPEED] [-c CONFIDENCE] 

    Scipio Neural Net

    optional arguments:
    -h, --help         show this help message and exit
    -a ALPHA       perceptron learning rate | value b/w 0 and 1
    -thresh THRESHOLD  perceptron threshold value | default 0.5
    -e EPOCHS      number of epochs to train > 0
    -l LOAD         file name to load neural net weights
    -t SPEED        amount of time to pause between requesting and solving a
                        challenge
    -c CONFIDENCE   amount of confidence scipio needs to be sure of it's
                        answer. default: 20